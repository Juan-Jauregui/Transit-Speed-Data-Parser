import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;

/*	This script takes in a text file generated by the Android app found at https://github.com/suryaharshan1/Speed-Data
	and parses its contents to calculate the speed of each vehicle whose start and stop times were recorded. This is computed
	by comparing the start and stop times with a known distance (measured at the time the data was collected).
*/
public class TrafficStopwatch {
	public static void main(String[] args) {
		//Reads file given by user and stores its data in String data
		
		System.out.print("What's the name of the text file? (Don't include .txt) : ");
		Scanner kb = new Scanner(System.in);
		String fileName = kb.next();	//filename of input text file

		BufferedReader br = null;
		String data = "";
		int lineCount = 0;		//Keeps track of the number of lines in the source file
		try {
			String sCurrentLine;
			//Absolute paths because I like doing hoodrat stuff
			String fileLocation = "/Users/Juan/Google Drive/School/Fall 2015/Prof. Comm/Data/" + fileName + ".txt";
			br = new BufferedReader(new FileReader(fileLocation));
			//Adds each line of the file into String data and increments lineCount
			while ((sCurrentLine = br.readLine()) != null) {
				data += sCurrentLine + "\n";
				lineCount++;
			}

		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				if (br != null)br.close();
			} catch (IOException ex) {
				ex.printStackTrace();
			}
		}
		//System.out.println("This is your data: \n\n" + data + "\n\n\n");
		String[] lines = data.split("\n");				//splits the data into an array of lines (Each line is a vehicle)
		String[][] dataSet = new String[lineCount][3];	//2D Array that will hold each line (vehicle data) split into 3 parts (Type, start, end)
		for(int i = 0; i < lines.length; i+=1){			//Loops through all the lines
			String[] tempArr = lines[i].split("\t");	//Saves the line as an array split by tabs (as they are in the text file)
			for(int j = 0; j < 3; j+=1){				//Three bits of info we want: Type, start, and end
				dataSet[i][j] = tempArr[j+1];			//Saves the three parts into a row in the 2D array
			}
			
		}
		//An array of Sample_Point objects the size of the dataset
		System.out.print("What was the distance? (meters): ");
		double dist = kb.nextDouble();
		Sample_Point[] sample_points = new Sample_Point[lineCount];

		for(int i = 0; i < lineCount; i+=1){
			//Fills the sample_points array with the data from the dataset to be analyzed by the sample_point class's methods.
			sample_points[i] = new Sample_Point(dataSet[i][0], dataSet[i][1], dataSet[i][2], dist);
		} 

		//Writing the output to an output file
		try {
			//Chart column titles
			String output_text = "Time\tType\tSpeed(Meters/Sec)\tSpeed(Miles/Hr)\n";
			for(int i = 0; i < lineCount; i+=1){
				output_text += sample_points[i].print();
			} 

			//Absolute paths because I like doing hoodrat stuff
			String outLocation = "/Users/Juan/Google Drive/School/Fall 2015/Prof. Comm/Data/" + fileName + "_output.txt";
			File file = new File(outLocation);

			// if file doesnt exist, then create it
			if (!file.exists()) {
				file.createNewFile();
			}

			FileWriter fw = new FileWriter(file.getAbsoluteFile());
			BufferedWriter bw = new BufferedWriter(fw);
			bw.write(output_text);
			bw.close();

			System.out.println("Done");

		} catch (IOException e) {
			System.out.println("Invalid Output;");
			e.printStackTrace();
		} 
		
	}
}

class Sample_Point {
	private String type;
	private String timestamp;
	private double speedMPS;
	private double speedMPH;
	private  double distance;	//meters
	private final double ONE_MPS_IN_MPH = 2.23694;
	

	public Sample_Point(String type, String start, String stop, double distance){
		this.type = findType(type);
		this.timestamp = start;
		int timeDiff = get_time_difference(start,stop, type);
		this.distance = distance;
		this.speedMPS = (distance/(timeDiff));
		this.speedMPS = (double)((int)(speedMPS*100))/100.0;
		this.speedMPH = (double)((int)((speedMPS*ONE_MPS_IN_MPH)*100))/100;
	}

	public String print(){
		String ret;
		ret = this.timestamp + "\t" + this.type + "\t" + Double.valueOf(getMPS()) + "\t" + Double.valueOf(getMPH()) + "\n" ;
		return ret;
	}

	private static int get_time_difference(String start, String stop, String kind){
		String[] start_arr = start.split(":");
		int mStart = Integer.parseInt(start_arr[0])*60*60 + Integer.parseInt(start_arr[1])*60 + Integer.parseInt(start_arr[2]);
		//System.out.println(mStart);

		String[] stop_arr = stop.split(":");
		int mStop = Integer.parseInt(stop_arr[0])*60*60 + Integer.parseInt(stop_arr[1])*60 + Integer.parseInt(stop_arr[2]);
		//System.out.println(mStop);

		//System.out.println(mStop - mStart);
		return (mStop - mStart);
	}

	public double getMPS(){
		return this.speedMPS;
	}

	public double getMPH(){
		return this.speedMPH;
	}

	public String getType(){
		return this.type;
	}

	private String findType(String letters){
		String type = "";
		switch(letters){
			case "CY":	type = "Bicycle";	
						break;
			case "TW":	type = "Motorcycle/Scooter";
						break;
			case "PC":	type = "Sedan";	
						break;
			case "JP":	type = "Jeep";	
						break;
			case "MB":	type = "SUV";	
						break;
			case "BS":	type = "Bus";	
						break;
			case "MT":	type = "Truck";	
						break;
			case "TR":	type = "Service Vehicle";
						break;
			default: type="NULL";
		}
		return type;
	}

}
